"""
This script is a modifiable template which is written for dataset v0.2.0.
It reads the json generated by organize_screened_csv_as_json.py in the format of
station_years[station_year] = {
    'all_scans_with_check':     {},  # scan: {"avg_dbz": float, "dualpol": True/False}
    'all_days_to_scans':        {},  # day: set(scan)
    'n_roost_annotations':              0,
    'n_roost_annotations_not_miss_day': 0,
    'n_bad_track_annotations':          0,
    'scans_with_roosts':                set(),  # positive scans
    'roost_days':                       set(),  # days with roosts
    'n_scans_without_roosts_in_roost_days': 0,  # negative scans
    'n_scans_in_non_roost_days':            0,  # scans from sampled non_roost_days become negatives
    'non_roost_days':                       set(),  # days without roosts
}
and defines scan lists and splits under **static/scan_lists/v0.2.0**.
We define two splits: standard and dualpol. The latter is with only scans that have dualpol.
"""

import numpy as np
import json, os
import random

STATIONS = [
    'KAPX', 'KBUF', 'KCLE', 'KDLH', 'KDTX', 'KGRB',
    'KGRR', 'KIWX', 'KLOT', 'KMKX', 'KMQT', 'KTYX',
]
SCAN_LIST_DIR = '../static/scan_lists/v0.2.0'
STD_SPLIT_DIR = '../static/scan_lists/v0.2.0/v0.2.0_standard_splits'
DP_SPLIT_DIR = '../static/scan_lists/v0.2.0/v0.2.0_dualpol_splits'
TRAIN_RATIO = 4/7.
VAL_RATIO = 1/7.

os.makedirs(SCAN_LIST_DIR, exist_ok=True)
os.makedirs(STD_SPLIT_DIR, exist_ok=True)
os.makedirs(DP_SPLIT_DIR, exist_ok=True)

# Collect all station years
station_years = {}
for station in STATIONS:
    station = json.load(open(f'prepare_dataset_v0.2.0_help/all_days_all_scans_{station}.json', 'r'))
    for station_year in station:
        station_years[station_year] = station[station_year]

# Print some stats
print('n_days:', sum([len(station_years[sy]["all_days_to_scans"]) for sy in station_years]))
print('n_roost_days:', sum([len(station_years[sy]["roost_days"]) for sy in station_years]))
print('n_non_roost_days:', sum([len(station_years[sy]["non_roost_days"]) for sy in station_years]))

print('n_scans:', sum([len(station_years[sy]["all_scans_with_check"]) for sy in station_years]))
n_scans_with_roosts = sum([len(station_years[sy]["scans_with_roosts"]) for sy in station_years])
print('n_scans_with_roosts:', n_scans_with_roosts)
print('n_scans_without_roosts_in_roost_days:',
      sum([station_years[sy]["n_scans_without_roosts_in_roost_days"] for sy in station_years]))
print('n_scans_in_non_roost_days:', sum([station_years[sy]["n_scans_in_non_roost_days"] for sy in station_years]))

print('n_roost_annotations:',
      sum([station_years[sy]["n_roost_annotations"] for sy in station_years]))
print('n_roost_annotations_not_miss_day:',
      sum([station_years[sy]["n_roost_annotations_not_miss_day"] for sy in station_years]))
print('n_bad_track_annotations:',
      sum([station_years[sy]["n_bad_track_annotations"] for sy in station_years]))

# Create the scan list txt for the dataset
with open(os.path.join(SCAN_LIST_DIR, 'scan_list.txt'), "w") as f:
    for station_year in station_years:
        f.writelines([scan + '\n' for scan in station_years[station_year]['all_scans_with_check']])

# Create splits
train_scans = []
val_scans = []
test_scans = []
dualpol_train_scans = []
dualpol_val_scans = []
dualpol_test_scans = []
n_train_days = 0
n_val_days = 0
n_test_days = 0
n_dualpol_train_days = 0
n_dualpol_val_days = 0
n_dualpol_test_days = 0
random.seed(1)

for station_year in station_years:
    no_dualpol_days = set()
    for scan in station_years[station_year]['all_scans_with_check']:
        if not station_years[station_year]['all_scans_with_check'][scan]['dualpol']:
            no_dualpol_days.add(scan[4:12])

    train_days = []
    val_days = []
    test_days = []
    dualpol_train_days = []
    dualpol_val_days = []
    dualpol_test_days = []

    # positive days
    roost_days = list(station_years[station_year]['roost_days'])
    random.shuffle(roost_days)
    _n = len(roost_days)
    _n_train = int(TRAIN_RATIO*_n)
    _n_val = int(VAL_RATIO*_n)
    train_days.extend(roost_days[:_n_train])
    val_days.extend(roost_days[_n_train:_n_train+_n_val])
    test_days.extend(roost_days[_n_train+_n_val:])

    # random negative days
    non_roost_days = list(station_years[station_year]['non_roost_days'])
    random.shuffle(non_roost_days)
    _n = min(len(non_roost_days), int(_n/2.))
    _n_train = int(TRAIN_RATIO*_n)
    _n_val = int(VAL_RATIO*_n)
    train_days.extend(non_roost_days[:_n_train])
    val_days.extend(non_roost_days[_n_train:_n_train+_n_val])
    test_days.extend(non_roost_days[_n_train+_n_val:_n])

    # negative days with highest average dbz at the lowest elevation
    _n = int(min(len(non_roost_days)/4, _n))
    dbz = [np.mean([
        station_years[station_year]['all_scans_with_check'][scan]['avg_dbz']
        for scan in station_years[station_year]['all_days_to_scans'][non_roost_day]
    ]) for non_roost_day in non_roost_days]
    top_dbz_non_roost_days = [
        non_roost_day for non_roost_day, _ in sorted(zip(non_roost_days, dbz), key=lambda p: -p[1])
    ][:_n]
    random.shuffle(top_dbz_non_roost_days)
    train_days.extend(top_dbz_non_roost_days[:_n_train])
    val_days.extend(top_dbz_non_roost_days[_n_train:_n_train+_n_val])
    test_days.extend(top_dbz_non_roost_days[_n_train+_n_val:_n])

    # Create standard splits
    train_days = set(train_days)
    n_train_days += len(train_days)
    for day in train_days:
        train_scans.extend(station_years[station_year]['all_days_to_scans'][day])
    val_days = set(val_days)
    n_val_days += len(val_days)
    for day in val_days:
        val_scans.extend(station_years[station_year]['all_days_to_scans'][day])
    test_days = set(test_days)
    n_test_days += len(test_days)
    for day in test_days:
        test_scans.extend(station_years[station_year]['all_days_to_scans'][day])
    
    # Create dualpol splits
    dualpol_train_days = set(train_days).difference(no_dualpol_days)
    n_dualpol_train_days += len(dualpol_train_days)
    for day in dualpol_train_days:
        dualpol_train_scans.extend(station_years[station_year]['all_days_to_scans'][day])
    dualpol_val_days = set(val_days).difference(no_dualpol_days)
    n_dualpol_val_days += len(dualpol_val_days)
    for day in dualpol_val_days:
        dualpol_val_scans.extend(station_years[station_year]['all_days_to_scans'][day])
    dualpol_test_days = set(test_days).difference(no_dualpol_days)
    n_dualpol_test_days += len(dualpol_test_days)
    for day in dualpol_test_days:
        dualpol_test_scans.extend(station_years[station_year]['all_days_to_scans'][day])

train_scans = [scan + '\n' for scan in sorted(list(set(train_scans)))]
val_scans = [scan + '\n' for scan in sorted(list(set(val_scans)))]
test_scans = [scan + '\n' for scan in sorted(list(set(test_scans)))]
dualpol_train_scans = [scan + '\n' for scan in sorted(list(set(dualpol_train_scans)))]
dualpol_val_scans = [scan + '\n' for scan in sorted(list(set(dualpol_val_scans)))]
dualpol_test_scans = [scan + '\n' for scan in sorted(list(set(dualpol_test_scans)))]

print("n_standard_split_days:", n_train_days + n_val_days + n_test_days)
print("n_train_days:", n_train_days)
print("n_val_days:", n_val_days)
print("n_test_days:", n_test_days)
n_standard_split_scans = len(train_scans) + len(val_scans) + len(test_scans)
print("n_standard_split_scans:", n_standard_split_scans)
print("n_neg_scans:n_pos_scans =", (n_standard_split_scans - n_scans_with_roosts) / n_scans_with_roosts)
print("n_train_scans:", len(train_scans))
print("n_val_scans:", len(val_scans))
print("n_test_scans:", len(test_scans))
print("n_dualpol_split_days:", n_dualpol_train_days + n_dualpol_val_days + n_dualpol_test_days)
print("n_dualpol_train_days:", n_dualpol_train_days)
print("n_dualpol_val_days:", n_dualpol_val_days)
print("n_dualpol_test_days:", n_dualpol_test_days)
print("n_dualpol_split_scans:", len(dualpol_train_scans) + len(dualpol_val_scans) + len(dualpol_test_scans))
print("n_dualpol_train_scans:", len(dualpol_train_scans))
print("n_dualpol_val_scans:", len(dualpol_val_scans))
print("n_dualpol_test_scans:", len(dualpol_test_scans))

with open(os.path.join(STD_SPLIT_DIR, 'train.txt'), "w") as f:
    f.writelines(train_scans)
with open(os.path.join(STD_SPLIT_DIR, 'val.txt'), "w") as f:
    f.writelines(val_scans)
with open(os.path.join(STD_SPLIT_DIR, 'test.txt'), "w") as f:
    f.writelines(test_scans)
with open(os.path.join(DP_SPLIT_DIR, 'train.txt'), "w") as f:
    f.writelines(dualpol_train_scans)
with open(os.path.join(DP_SPLIT_DIR, 'val.txt'), "w") as f:
    f.writelines(dualpol_val_scans)
with open(os.path.join(DP_SPLIT_DIR, 'test.txt'), "w") as f:
    f.writelines(dualpol_test_scans)

